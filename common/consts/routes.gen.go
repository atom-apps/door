// Code generated by go-enum DO NOT EDIT.
// Version: -
// Revision: -
// Build Date: -
// Built By: -

package consts

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// RouteTypePage is a RouteType of type page.
	RouteTypePage RouteType = "page"
	// RouteTypeApi is a RouteType of type api.
	RouteTypeApi RouteType = "api"
)

var ErrInvalidRouteType = fmt.Errorf("not a valid RouteType, try [%s]", strings.Join(_RouteTypeNames, ", "))

var _RouteTypeNames = []string{
	string(RouteTypePage),
	string(RouteTypeApi),
}

// RouteTypeNames returns a list of possible string values of RouteType.
func RouteTypeNames() []string {
	tmp := make([]string, len(_RouteTypeNames))
	copy(tmp, _RouteTypeNames)
	return tmp
}

// RouteTypeValues returns a list of the values for RouteType
func RouteTypeValues() []RouteType {
	return []RouteType{
		RouteTypePage,
		RouteTypeApi,
	}
}

// String implements the Stringer interface.
func (x RouteType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RouteType) IsValid() bool {
	_, err := ParseRouteType(string(x))
	return err == nil
}

var _RouteTypeValue = map[string]RouteType{
	"page": RouteTypePage,
	"api":  RouteTypeApi,
}

// ParseRouteType attempts to convert a string to a RouteType.
func ParseRouteType(name string) (RouteType, error) {
	if x, ok := _RouteTypeValue[name]; ok {
		return x, nil
	}
	return RouteType(""), fmt.Errorf("%s is %w", name, ErrInvalidRouteType)
}

var errRouteTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *RouteType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = RouteType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseRouteType(v)
	case []byte:
		*x, err = ParseRouteType(string(v))
	case RouteType:
		*x = v
	case *RouteType:
		if v == nil {
			return errRouteTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errRouteTypeNilPtr
		}
		*x, err = ParseRouteType(*v)
	default:
		return errors.New("invalid type for RouteType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x RouteType) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *RouteType) Set(val string) error {
	v, err := ParseRouteType(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *RouteType) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *RouteType) Type() string {
	return "RouteType"
}

type NullRouteType struct {
	RouteType RouteType
	Valid     bool
}

func NewNullRouteType(val interface{}) (x NullRouteType) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullRouteType) Scan(value interface{}) (err error) {
	if value == nil {
		x.RouteType, x.Valid = RouteType(""), false
		return
	}

	err = x.RouteType.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullRouteType) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	// driver.Value accepts int64 for int values.
	return string(x.RouteType), nil
}

type NullRouteTypeStr struct {
	NullRouteType
}

func NewNullRouteTypeStr(val interface{}) (x NullRouteTypeStr) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Value implements the driver Valuer interface.
func (x NullRouteTypeStr) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.RouteType.String(), nil
}

// Code generated by the atomctl; DO NOT EDIT.

package routes

import (
	"strings"

	"github.com/atom-apps/door/modules/auth/controller"
	"github.com/atom-apps/door/modules/auth/dto"
	"github.com/atom-providers/jwt"

	"github.com/gofiber/fiber/v2"
	. "github.com/rogeecn/fen"
)

func routeAuthController(engine fiber.Router, controller *controller.AuthController) {
	groupPrefix := "/" + strings.TrimLeft(engine.(*fiber.Group).Prefix, "/")
	engine.Post(strings.TrimPrefix("/v1/auth/signup", groupPrefix), DataFunc1(controller.SignUp, Body[dto.SignUpForm](BodyParamError)))
	engine.Post(strings.TrimPrefix("/v1/auth/signin", groupPrefix), DataFunc1(controller.SignIn, Body[dto.SignInForm](BodyParamError)))
	engine.Post(strings.TrimPrefix("/v1/auth/logout", groupPrefix), Func1(controller.Logout, JwtClaim[jwt.Claims](ClaimParamError)))
	engine.Post(strings.TrimPrefix("/v1/auth/refresh-token", groupPrefix), DataFunc1(controller.RefreshToken, JwtClaim[jwt.Claims](ClaimParamError)))
	engine.Post(strings.TrimPrefix("/v1/auth/exchange-token-by-code", groupPrefix), DataFunc1(controller.ExchangeTokenByCode, Body[dto.ExchangeTokenByCodeForm](BodyParamError)))
	engine.Post(strings.TrimPrefix("/v1/auth/check-reset-password-code", groupPrefix), DataFunc1(controller.CheckResetPasswordCoe, Body[dto.CheckPasswordResetCodeForm](BodyParamError)))
	engine.Post(strings.TrimPrefix("/v1/auth/reset-password-by-token", groupPrefix), Func1(controller.ResetPassword, Body[dto.ResetPasswordForm](BodyParamError)))
}

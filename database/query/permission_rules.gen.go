// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/atom-apps/door/database/models"
)

func newPermissionRule(db *gorm.DB, opts ...gen.DOOption) permissionRule {
	_permissionRule := permissionRule{}

	_permissionRule.permissionRuleDo.UseDB(db, opts...)
	_permissionRule.permissionRuleDo.UseModel(&models.PermissionRule{})

	tableName := _permissionRule.permissionRuleDo.TableName()
	_permissionRule.ALL = field.NewAsterisk(tableName)
	_permissionRule.ID = field.NewInt64(tableName, "id")
	_permissionRule.Ptype = field.NewString(tableName, "ptype")
	_permissionRule.V0 = field.NewString(tableName, "v0")
	_permissionRule.V1 = field.NewString(tableName, "v1")
	_permissionRule.V2 = field.NewString(tableName, "v2")
	_permissionRule.V3 = field.NewString(tableName, "v3")
	_permissionRule.V4 = field.NewString(tableName, "v4")
	_permissionRule.V5 = field.NewString(tableName, "v5")

	_permissionRule.fillFieldMap()

	return _permissionRule
}

type permissionRule struct {
	permissionRuleDo permissionRuleDo

	ALL   field.Asterisk
	ID    field.Int64
	Ptype field.String
	V0    field.String
	V1    field.String
	V2    field.String
	V3    field.String
	V4    field.String
	V5    field.String

	fieldMap map[string]field.Expr
}

func (p permissionRule) Table(newTableName string) *permissionRule {
	p.permissionRuleDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p permissionRule) As(alias string) *permissionRule {
	p.permissionRuleDo.DO = *(p.permissionRuleDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *permissionRule) updateTableName(table string) *permissionRule {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Ptype = field.NewString(table, "ptype")
	p.V0 = field.NewString(table, "v0")
	p.V1 = field.NewString(table, "v1")
	p.V2 = field.NewString(table, "v2")
	p.V3 = field.NewString(table, "v3")
	p.V4 = field.NewString(table, "v4")
	p.V5 = field.NewString(table, "v5")

	p.fillFieldMap()

	return p
}

func (p *permissionRule) WithContext(ctx context.Context) IPermissionRuleDo {
	return p.permissionRuleDo.WithContext(ctx)
}

func (p permissionRule) TableName() string { return p.permissionRuleDo.TableName() }

func (p permissionRule) Alias() string { return p.permissionRuleDo.Alias() }

func (p permissionRule) Columns(cols ...field.Expr) gen.Columns {
	return p.permissionRuleDo.Columns(cols...)
}

func (p *permissionRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *permissionRule) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["ptype"] = p.Ptype
	p.fieldMap["v0"] = p.V0
	p.fieldMap["v1"] = p.V1
	p.fieldMap["v2"] = p.V2
	p.fieldMap["v3"] = p.V3
	p.fieldMap["v4"] = p.V4
	p.fieldMap["v5"] = p.V5
}

func (p permissionRule) clone(db *gorm.DB) permissionRule {
	p.permissionRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p permissionRule) replaceDB(db *gorm.DB) permissionRule {
	p.permissionRuleDo.ReplaceDB(db)
	return p
}

type permissionRuleDo struct{ gen.DO }

type IPermissionRuleDo interface {
	gen.SubQuery
	Debug() IPermissionRuleDo
	WithContext(ctx context.Context) IPermissionRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPermissionRuleDo
	WriteDB() IPermissionRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPermissionRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPermissionRuleDo
	Not(conds ...gen.Condition) IPermissionRuleDo
	Or(conds ...gen.Condition) IPermissionRuleDo
	Select(conds ...field.Expr) IPermissionRuleDo
	Where(conds ...gen.Condition) IPermissionRuleDo
	Order(conds ...field.Expr) IPermissionRuleDo
	Distinct(cols ...field.Expr) IPermissionRuleDo
	Omit(cols ...field.Expr) IPermissionRuleDo
	Join(table schema.Tabler, on ...field.Expr) IPermissionRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPermissionRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPermissionRuleDo
	Group(cols ...field.Expr) IPermissionRuleDo
	Having(conds ...gen.Condition) IPermissionRuleDo
	Limit(limit int) IPermissionRuleDo
	Offset(offset int) IPermissionRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPermissionRuleDo
	Unscoped() IPermissionRuleDo
	Create(values ...*models.PermissionRule) error
	CreateInBatches(values []*models.PermissionRule, batchSize int) error
	Save(values ...*models.PermissionRule) error
	First() (*models.PermissionRule, error)
	Take() (*models.PermissionRule, error)
	Last() (*models.PermissionRule, error)
	Find() ([]*models.PermissionRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PermissionRule, err error)
	FindInBatches(result *[]*models.PermissionRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.PermissionRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPermissionRuleDo
	Assign(attrs ...field.AssignExpr) IPermissionRuleDo
	Joins(fields ...field.RelationField) IPermissionRuleDo
	Preload(fields ...field.RelationField) IPermissionRuleDo
	FirstOrInit() (*models.PermissionRule, error)
	FirstOrCreate() (*models.PermissionRule, error)
	FindByPage(offset int, limit int) (result []*models.PermissionRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPermissionRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p permissionRuleDo) Debug() IPermissionRuleDo {
	return p.withDO(p.DO.Debug())
}

func (p permissionRuleDo) WithContext(ctx context.Context) IPermissionRuleDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p permissionRuleDo) ReadDB() IPermissionRuleDo {
	return p.Clauses(dbresolver.Read)
}

func (p permissionRuleDo) WriteDB() IPermissionRuleDo {
	return p.Clauses(dbresolver.Write)
}

func (p permissionRuleDo) Session(config *gorm.Session) IPermissionRuleDo {
	return p.withDO(p.DO.Session(config))
}

func (p permissionRuleDo) Clauses(conds ...clause.Expression) IPermissionRuleDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p permissionRuleDo) Returning(value interface{}, columns ...string) IPermissionRuleDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p permissionRuleDo) Not(conds ...gen.Condition) IPermissionRuleDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p permissionRuleDo) Or(conds ...gen.Condition) IPermissionRuleDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p permissionRuleDo) Select(conds ...field.Expr) IPermissionRuleDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p permissionRuleDo) Where(conds ...gen.Condition) IPermissionRuleDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p permissionRuleDo) Order(conds ...field.Expr) IPermissionRuleDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p permissionRuleDo) Distinct(cols ...field.Expr) IPermissionRuleDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p permissionRuleDo) Omit(cols ...field.Expr) IPermissionRuleDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p permissionRuleDo) Join(table schema.Tabler, on ...field.Expr) IPermissionRuleDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p permissionRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPermissionRuleDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p permissionRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) IPermissionRuleDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p permissionRuleDo) Group(cols ...field.Expr) IPermissionRuleDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p permissionRuleDo) Having(conds ...gen.Condition) IPermissionRuleDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p permissionRuleDo) Limit(limit int) IPermissionRuleDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p permissionRuleDo) Offset(offset int) IPermissionRuleDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p permissionRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPermissionRuleDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p permissionRuleDo) Unscoped() IPermissionRuleDo {
	return p.withDO(p.DO.Unscoped())
}

func (p permissionRuleDo) Create(values ...*models.PermissionRule) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p permissionRuleDo) CreateInBatches(values []*models.PermissionRule, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p permissionRuleDo) Save(values ...*models.PermissionRule) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p permissionRuleDo) First() (*models.PermissionRule, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.PermissionRule), nil
	}
}

func (p permissionRuleDo) Take() (*models.PermissionRule, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.PermissionRule), nil
	}
}

func (p permissionRuleDo) Last() (*models.PermissionRule, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.PermissionRule), nil
	}
}

func (p permissionRuleDo) Find() ([]*models.PermissionRule, error) {
	result, err := p.DO.Find()
	return result.([]*models.PermissionRule), err
}

func (p permissionRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PermissionRule, err error) {
	buf := make([]*models.PermissionRule, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p permissionRuleDo) FindInBatches(result *[]*models.PermissionRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p permissionRuleDo) Attrs(attrs ...field.AssignExpr) IPermissionRuleDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p permissionRuleDo) Assign(attrs ...field.AssignExpr) IPermissionRuleDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p permissionRuleDo) Joins(fields ...field.RelationField) IPermissionRuleDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p permissionRuleDo) Preload(fields ...field.RelationField) IPermissionRuleDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p permissionRuleDo) FirstOrInit() (*models.PermissionRule, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.PermissionRule), nil
	}
}

func (p permissionRuleDo) FirstOrCreate() (*models.PermissionRule, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.PermissionRule), nil
	}
}

func (p permissionRuleDo) FindByPage(offset int, limit int) (result []*models.PermissionRule, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p permissionRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p permissionRuleDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p permissionRuleDo) Delete(models ...*models.PermissionRule) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *permissionRuleDo) withDO(do gen.Dao) *permissionRuleDo {
	p.DO = *do.(*gen.DO)
	return p
}

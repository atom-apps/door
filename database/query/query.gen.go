// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Location       *location
	Migration      *migration
	Permission     *permission
	Role           *role
	Route          *route
	RouteWhitelist *routeWhitelist
	Session        *session
	Tenant         *tenant
	Token          *token
	User           *user
	UserInfo       *userInfo
	UserTenantRole *userTenantRole
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Location = &Q.Location
	Migration = &Q.Migration
	Permission = &Q.Permission
	Role = &Q.Role
	Route = &Q.Route
	RouteWhitelist = &Q.RouteWhitelist
	Session = &Q.Session
	Tenant = &Q.Tenant
	Token = &Q.Token
	User = &Q.User
	UserInfo = &Q.UserInfo
	UserTenantRole = &Q.UserTenantRole
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Location:       newLocation(db, opts...),
		Migration:      newMigration(db, opts...),
		Permission:     newPermission(db, opts...),
		Role:           newRole(db, opts...),
		Route:          newRoute(db, opts...),
		RouteWhitelist: newRouteWhitelist(db, opts...),
		Session:        newSession(db, opts...),
		Tenant:         newTenant(db, opts...),
		Token:          newToken(db, opts...),
		User:           newUser(db, opts...),
		UserInfo:       newUserInfo(db, opts...),
		UserTenantRole: newUserTenantRole(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Location       location
	Migration      migration
	Permission     permission
	Role           role
	Route          route
	RouteWhitelist routeWhitelist
	Session        session
	Tenant         tenant
	Token          token
	User           user
	UserInfo       userInfo
	UserTenantRole userTenantRole
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Location:       q.Location.clone(db),
		Migration:      q.Migration.clone(db),
		Permission:     q.Permission.clone(db),
		Role:           q.Role.clone(db),
		Route:          q.Route.clone(db),
		RouteWhitelist: q.RouteWhitelist.clone(db),
		Session:        q.Session.clone(db),
		Tenant:         q.Tenant.clone(db),
		Token:          q.Token.clone(db),
		User:           q.User.clone(db),
		UserInfo:       q.UserInfo.clone(db),
		UserTenantRole: q.UserTenantRole.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Location:       q.Location.replaceDB(db),
		Migration:      q.Migration.replaceDB(db),
		Permission:     q.Permission.replaceDB(db),
		Role:           q.Role.replaceDB(db),
		Route:          q.Route.replaceDB(db),
		RouteWhitelist: q.RouteWhitelist.replaceDB(db),
		Session:        q.Session.replaceDB(db),
		Tenant:         q.Tenant.replaceDB(db),
		Token:          q.Token.replaceDB(db),
		User:           q.User.replaceDB(db),
		UserInfo:       q.UserInfo.replaceDB(db),
		UserTenantRole: q.UserTenantRole.replaceDB(db),
	}
}

type queryCtx struct {
	Location       ILocationDo
	Migration      IMigrationDo
	Permission     IPermissionDo
	Role           IRoleDo
	Route          IRouteDo
	RouteWhitelist IRouteWhitelistDo
	Session        ISessionDo
	Tenant         ITenantDo
	Token          ITokenDo
	User           IUserDo
	UserInfo       IUserInfoDo
	UserTenantRole IUserTenantRoleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Location:       q.Location.WithContext(ctx),
		Migration:      q.Migration.WithContext(ctx),
		Permission:     q.Permission.WithContext(ctx),
		Role:           q.Role.WithContext(ctx),
		Route:          q.Route.WithContext(ctx),
		RouteWhitelist: q.RouteWhitelist.WithContext(ctx),
		Session:        q.Session.WithContext(ctx),
		Tenant:         q.Tenant.WithContext(ctx),
		Token:          q.Token.WithContext(ctx),
		User:           q.User.WithContext(ctx),
		UserInfo:       q.UserInfo.WithContext(ctx),
		UserTenantRole: q.UserTenantRole.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

// Code generated by go-enum DO NOT EDIT.
// Version: -
// Revision: -
// Build Date: -
// Built By: -

package consts

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// CacheKeyVerifyCode is a CacheKey of type VerifyCode.
	CacheKeyVerifyCode CacheKey = "code:__CHANNEL__:%s"
)

var ErrInvalidCacheKey = fmt.Errorf("not a valid CacheKey, try [%s]", strings.Join(_CacheKeyNames, ", "))

var _CacheKeyNames = []string{
	string(CacheKeyVerifyCode),
}

// CacheKeyNames returns a list of possible string values of CacheKey.
func CacheKeyNames() []string {
	tmp := make([]string, len(_CacheKeyNames))
	copy(tmp, _CacheKeyNames)
	return tmp
}

// CacheKeyValues returns a list of the values for CacheKey
func CacheKeyValues() []CacheKey {
	return []CacheKey{
		CacheKeyVerifyCode,
	}
}

// String implements the Stringer interface.
func (x CacheKey) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CacheKey) IsValid() bool {
	_, err := ParseCacheKey(string(x))
	return err == nil
}

var _CacheKeyValue = map[string]CacheKey{
	"code:__CHANNEL__:%s": CacheKeyVerifyCode,
}

// ParseCacheKey attempts to convert a string to a CacheKey.
func ParseCacheKey(name string) (CacheKey, error) {
	if x, ok := _CacheKeyValue[name]; ok {
		return x, nil
	}
	return CacheKey(""), fmt.Errorf("%s is %w", name, ErrInvalidCacheKey)
}

var errCacheKeyNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *CacheKey) Scan(value interface{}) (err error) {
	if value == nil {
		*x = CacheKey("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseCacheKey(v)
	case []byte:
		*x, err = ParseCacheKey(string(v))
	case CacheKey:
		*x = v
	case *CacheKey:
		if v == nil {
			return errCacheKeyNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errCacheKeyNilPtr
		}
		*x, err = ParseCacheKey(*v)
	default:
		return errors.New("invalid type for CacheKey")
	}

	return
}

// Value implements the driver Valuer interface.
func (x CacheKey) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *CacheKey) Set(val string) error {
	v, err := ParseCacheKey(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *CacheKey) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *CacheKey) Type() string {
	return "CacheKey"
}

type NullCacheKey struct {
	CacheKey CacheKey
	Valid    bool
}

func NewNullCacheKey(val interface{}) (x NullCacheKey) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullCacheKey) Scan(value interface{}) (err error) {
	if value == nil {
		x.CacheKey, x.Valid = CacheKey(""), false
		return
	}

	err = x.CacheKey.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullCacheKey) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	// driver.Value accepts int64 for int values.
	return string(x.CacheKey), nil
}

type NullCacheKeyStr struct {
	NullCacheKey
}

func NewNullCacheKeyStr(val interface{}) (x NullCacheKeyStr) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Value implements the driver Valuer interface.
func (x NullCacheKeyStr) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.CacheKey.String(), nil
}

const (
	// VerifyCodeChannelSignin is a VerifyCodeChannel of type signin.
	VerifyCodeChannelSignin VerifyCodeChannel = "signin"
	// VerifyCodeChannelSignup is a VerifyCodeChannel of type signup.
	VerifyCodeChannelSignup VerifyCodeChannel = "signup"
	// VerifyCodeChannelResetPassword is a VerifyCodeChannel of type reset-password.
	VerifyCodeChannelResetPassword VerifyCodeChannel = "reset-password"
)

var ErrInvalidVerifyCodeChannel = fmt.Errorf("not a valid VerifyCodeChannel, try [%s]", strings.Join(_VerifyCodeChannelNames, ", "))

var _VerifyCodeChannelNames = []string{
	string(VerifyCodeChannelSignin),
	string(VerifyCodeChannelSignup),
	string(VerifyCodeChannelResetPassword),
}

// VerifyCodeChannelNames returns a list of possible string values of VerifyCodeChannel.
func VerifyCodeChannelNames() []string {
	tmp := make([]string, len(_VerifyCodeChannelNames))
	copy(tmp, _VerifyCodeChannelNames)
	return tmp
}

// VerifyCodeChannelValues returns a list of the values for VerifyCodeChannel
func VerifyCodeChannelValues() []VerifyCodeChannel {
	return []VerifyCodeChannel{
		VerifyCodeChannelSignin,
		VerifyCodeChannelSignup,
		VerifyCodeChannelResetPassword,
	}
}

// String implements the Stringer interface.
func (x VerifyCodeChannel) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x VerifyCodeChannel) IsValid() bool {
	_, err := ParseVerifyCodeChannel(string(x))
	return err == nil
}

var _VerifyCodeChannelValue = map[string]VerifyCodeChannel{
	"signin":         VerifyCodeChannelSignin,
	"signup":         VerifyCodeChannelSignup,
	"reset-password": VerifyCodeChannelResetPassword,
}

// ParseVerifyCodeChannel attempts to convert a string to a VerifyCodeChannel.
func ParseVerifyCodeChannel(name string) (VerifyCodeChannel, error) {
	if x, ok := _VerifyCodeChannelValue[name]; ok {
		return x, nil
	}
	return VerifyCodeChannel(""), fmt.Errorf("%s is %w", name, ErrInvalidVerifyCodeChannel)
}

var errVerifyCodeChannelNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *VerifyCodeChannel) Scan(value interface{}) (err error) {
	if value == nil {
		*x = VerifyCodeChannel("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseVerifyCodeChannel(v)
	case []byte:
		*x, err = ParseVerifyCodeChannel(string(v))
	case VerifyCodeChannel:
		*x = v
	case *VerifyCodeChannel:
		if v == nil {
			return errVerifyCodeChannelNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errVerifyCodeChannelNilPtr
		}
		*x, err = ParseVerifyCodeChannel(*v)
	default:
		return errors.New("invalid type for VerifyCodeChannel")
	}

	return
}

// Value implements the driver Valuer interface.
func (x VerifyCodeChannel) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *VerifyCodeChannel) Set(val string) error {
	v, err := ParseVerifyCodeChannel(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *VerifyCodeChannel) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *VerifyCodeChannel) Type() string {
	return "VerifyCodeChannel"
}

type NullVerifyCodeChannel struct {
	VerifyCodeChannel VerifyCodeChannel
	Valid             bool
}

func NewNullVerifyCodeChannel(val interface{}) (x NullVerifyCodeChannel) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullVerifyCodeChannel) Scan(value interface{}) (err error) {
	if value == nil {
		x.VerifyCodeChannel, x.Valid = VerifyCodeChannel(""), false
		return
	}

	err = x.VerifyCodeChannel.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullVerifyCodeChannel) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	// driver.Value accepts int64 for int values.
	return string(x.VerifyCodeChannel), nil
}

type NullVerifyCodeChannelStr struct {
	NullVerifyCodeChannel
}

func NewNullVerifyCodeChannelStr(val interface{}) (x NullVerifyCodeChannelStr) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Value implements the driver Valuer interface.
func (x NullVerifyCodeChannelStr) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.VerifyCodeChannel.String(), nil
}

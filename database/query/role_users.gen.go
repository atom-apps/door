// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/atom-apps/door/database/models"
)

func newRoleUser(db *gorm.DB, opts ...gen.DOOption) roleUser {
	_roleUser := roleUser{}

	_roleUser.roleUserDo.UseDB(db, opts...)
	_roleUser.roleUserDo.UseModel(&models.RoleUser{})

	tableName := _roleUser.roleUserDo.TableName()
	_roleUser.ALL = field.NewAsterisk(tableName)
	_roleUser.ID = field.NewInt64(tableName, "id")
	_roleUser.RoleID = field.NewInt64(tableName, "role_id")
	_roleUser.UserID = field.NewInt64(tableName, "user_id")
	_roleUser.TenantID = field.NewInt64(tableName, "tenant_id")

	_roleUser.fillFieldMap()

	return _roleUser
}

type roleUser struct {
	roleUserDo roleUserDo

	ALL      field.Asterisk
	ID       field.Int64
	RoleID   field.Int64
	UserID   field.Int64
	TenantID field.Int64

	fieldMap map[string]field.Expr
}

func (r roleUser) Table(newTableName string) *roleUser {
	r.roleUserDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleUser) As(alias string) *roleUser {
	r.roleUserDo.DO = *(r.roleUserDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleUser) updateTableName(table string) *roleUser {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.RoleID = field.NewInt64(table, "role_id")
	r.UserID = field.NewInt64(table, "user_id")
	r.TenantID = field.NewInt64(table, "tenant_id")

	r.fillFieldMap()

	return r
}

func (r *roleUser) WithContext(ctx context.Context) IRoleUserDo { return r.roleUserDo.WithContext(ctx) }

func (r roleUser) TableName() string { return r.roleUserDo.TableName() }

func (r roleUser) Alias() string { return r.roleUserDo.Alias() }

func (r roleUser) Columns(cols ...field.Expr) gen.Columns { return r.roleUserDo.Columns(cols...) }

func (r *roleUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleUser) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["id"] = r.ID
	r.fieldMap["role_id"] = r.RoleID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["tenant_id"] = r.TenantID
}

func (r roleUser) clone(db *gorm.DB) roleUser {
	r.roleUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roleUser) replaceDB(db *gorm.DB) roleUser {
	r.roleUserDo.ReplaceDB(db)
	return r
}

type roleUserDo struct{ gen.DO }

type IRoleUserDo interface {
	gen.SubQuery
	Debug() IRoleUserDo
	WithContext(ctx context.Context) IRoleUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoleUserDo
	WriteDB() IRoleUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoleUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoleUserDo
	Not(conds ...gen.Condition) IRoleUserDo
	Or(conds ...gen.Condition) IRoleUserDo
	Select(conds ...field.Expr) IRoleUserDo
	Where(conds ...gen.Condition) IRoleUserDo
	Order(conds ...field.Expr) IRoleUserDo
	Distinct(cols ...field.Expr) IRoleUserDo
	Omit(cols ...field.Expr) IRoleUserDo
	Join(table schema.Tabler, on ...field.Expr) IRoleUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoleUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoleUserDo
	Group(cols ...field.Expr) IRoleUserDo
	Having(conds ...gen.Condition) IRoleUserDo
	Limit(limit int) IRoleUserDo
	Offset(offset int) IRoleUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleUserDo
	Unscoped() IRoleUserDo
	Create(values ...*models.RoleUser) error
	CreateInBatches(values []*models.RoleUser, batchSize int) error
	Save(values ...*models.RoleUser) error
	First() (*models.RoleUser, error)
	Take() (*models.RoleUser, error)
	Last() (*models.RoleUser, error)
	Find() ([]*models.RoleUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RoleUser, err error)
	FindInBatches(result *[]*models.RoleUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.RoleUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoleUserDo
	Assign(attrs ...field.AssignExpr) IRoleUserDo
	Joins(fields ...field.RelationField) IRoleUserDo
	Preload(fields ...field.RelationField) IRoleUserDo
	FirstOrInit() (*models.RoleUser, error)
	FirstOrCreate() (*models.RoleUser, error)
	FindByPage(offset int, limit int) (result []*models.RoleUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoleUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roleUserDo) Debug() IRoleUserDo {
	return r.withDO(r.DO.Debug())
}

func (r roleUserDo) WithContext(ctx context.Context) IRoleUserDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleUserDo) ReadDB() IRoleUserDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleUserDo) WriteDB() IRoleUserDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleUserDo) Session(config *gorm.Session) IRoleUserDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleUserDo) Clauses(conds ...clause.Expression) IRoleUserDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleUserDo) Returning(value interface{}, columns ...string) IRoleUserDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleUserDo) Not(conds ...gen.Condition) IRoleUserDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleUserDo) Or(conds ...gen.Condition) IRoleUserDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleUserDo) Select(conds ...field.Expr) IRoleUserDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleUserDo) Where(conds ...gen.Condition) IRoleUserDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleUserDo) Order(conds ...field.Expr) IRoleUserDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleUserDo) Distinct(cols ...field.Expr) IRoleUserDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleUserDo) Omit(cols ...field.Expr) IRoleUserDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleUserDo) Join(table schema.Tabler, on ...field.Expr) IRoleUserDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoleUserDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoleUserDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleUserDo) Group(cols ...field.Expr) IRoleUserDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleUserDo) Having(conds ...gen.Condition) IRoleUserDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleUserDo) Limit(limit int) IRoleUserDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleUserDo) Offset(offset int) IRoleUserDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleUserDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleUserDo) Unscoped() IRoleUserDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleUserDo) Create(values ...*models.RoleUser) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleUserDo) CreateInBatches(values []*models.RoleUser, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleUserDo) Save(values ...*models.RoleUser) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleUserDo) First() (*models.RoleUser, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoleUser), nil
	}
}

func (r roleUserDo) Take() (*models.RoleUser, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoleUser), nil
	}
}

func (r roleUserDo) Last() (*models.RoleUser, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoleUser), nil
	}
}

func (r roleUserDo) Find() ([]*models.RoleUser, error) {
	result, err := r.DO.Find()
	return result.([]*models.RoleUser), err
}

func (r roleUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RoleUser, err error) {
	buf := make([]*models.RoleUser, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleUserDo) FindInBatches(result *[]*models.RoleUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleUserDo) Attrs(attrs ...field.AssignExpr) IRoleUserDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleUserDo) Assign(attrs ...field.AssignExpr) IRoleUserDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleUserDo) Joins(fields ...field.RelationField) IRoleUserDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleUserDo) Preload(fields ...field.RelationField) IRoleUserDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleUserDo) FirstOrInit() (*models.RoleUser, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoleUser), nil
	}
}

func (r roleUserDo) FirstOrCreate() (*models.RoleUser, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RoleUser), nil
	}
}

func (r roleUserDo) FindByPage(offset int, limit int) (result []*models.RoleUser, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleUserDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleUserDo) Delete(models ...*models.RoleUser) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleUserDo) withDO(do gen.Dao) *roleUserDo {
	r.DO = *do.(*gen.DO)
	return r
}

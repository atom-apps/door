// Code generated by the atomctl; DO NOT EDIT.

package routes

import (
	 "strings"

	"github.com/atom-apps/door/modules/users/controller"
	"github.com/atom-apps/door/modules/users/dto"
	"github.com/atom-apps/door/common"

	"github.com/gofiber/fiber/v2"
	. "github.com/rogeecn/fen"
)

func routePermissionController(engine fiber.Router, controller *controller.PermissionController) {
	basePath := "/"+engine.(*fiber.Group).Prefix
	engine.Get(strings.TrimPrefix("/v1/users/permissions/:id<int>", basePath), DataFunc1(controller.Show, Integer[uint64]("id", PathParamError)))
	engine.Get(strings.TrimPrefix("/v1/users/permissions", basePath), DataFunc3(controller.List, Query[dto.PermissionListQueryFilter](QueryParamError), Query[common.PageQueryFilter](QueryParamError), Query[common.SortQueryFilter](QueryParamError)))
	engine.Post(strings.TrimPrefix("/v1/users/permissions", basePath), Func1(controller.Create, Body[dto.PermissionForm](BodyParamError)))
	engine.Put(strings.TrimPrefix("/v1/users/permissions/:id<int>", basePath), Func2(controller.Update, Integer[uint64]("id", PathParamError), Body[dto.PermissionForm](BodyParamError)))
	engine.Delete(strings.TrimPrefix("/v1/users/permissions/:id<int>", basePath), Func1(controller.Delete, Integer[uint64]("id", PathParamError)))
	engine.Put(strings.TrimPrefix("/v1/users/permissions/attach/:roleId<int>/:tenantId", basePath), Func3(controller.AttachUsers, Integer[uint64]("roleID", PathParamError), Integer[uint64]("tenantID", PathParamError), Body[common.IDsForm](BodyParamError)))
	engine.Put(strings.TrimPrefix("/v1/users/permissions/detach/:roleId<int>/:tenantId", basePath), Func3(controller.DetachUsers, Integer[uint64]("roleID", PathParamError), Integer[uint64]("tenantID", PathParamError), Body[common.IDsForm](BodyParamError)))
	engine.Get(strings.TrimPrefix("/v1/users/permissions/tree", basePath), DataFunc(controller.Tree))
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"time"

	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

const TableNameUser = "users"

// User mapped from table <users>
type User struct {
	ID            int64          `gorm:"column:id;type:bigint;primaryKey;autoIncrement:true" json:"id"`
	CreatedAt     time.Time      `gorm:"column:created_at;type:timestamp with time zone" json:"created_at"`
	UpdatedAt     time.Time      `gorm:"column:updated_at;type:timestamp with time zone" json:"updated_at"`
	DeletedAt     gorm.DeletedAt `gorm:"column:deleted_at;type:timestamp with time zone" json:"deleted_at" swaggertype:"string"`
	UUID          string         `gorm:"column:uuid;type:character varying(128)" json:"uuid"`
	Username      string         `gorm:"column:username;type:character varying(128)" json:"username"`
	Password      string         `gorm:"column:password;type:character varying(128)" json:"password"`
	Email         string         `gorm:"column:email;type:character varying(128)" json:"email"`
	EmailVerified bool           `gorm:"column:email_verified;type:boolean" json:"email_verified"`
	Phone         string         `gorm:"column:phone;type:character varying(128)" json:"phone"`
	DisplayName   string         `gorm:"column:display_name;type:character varying(128)" json:"display_name"`
	Avatar        string         `gorm:"column:avatar;type:text" json:"avatar"`
	Status        string         `gorm:"column:status;type:character varying(64)" json:"status"`
}

func (*User) TableName(namer schema.Namer) string {
	if namer == nil {
		return TableNameUser
	}
	return namer.TableName(TableNameUser)
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/atom-apps/door/database/models"
)

func newRouteWhitelist(db *gorm.DB, opts ...gen.DOOption) routeWhitelist {
	_routeWhitelist := routeWhitelist{}

	_routeWhitelist.routeWhitelistDo.UseDB(db, opts...)
	_routeWhitelist.routeWhitelistDo.UseModel(&models.RouteWhitelist{})

	tableName := _routeWhitelist.routeWhitelistDo.TableName()
	_routeWhitelist.ALL = field.NewAsterisk(tableName)
	_routeWhitelist.ID = field.NewUint64(tableName, "id")
	_routeWhitelist.CreatedAt = field.NewTime(tableName, "created_at")
	_routeWhitelist.Route = field.NewString(tableName, "route")

	_routeWhitelist.fillFieldMap()

	return _routeWhitelist
}

type routeWhitelist struct {
	routeWhitelistDo routeWhitelistDo

	ALL       field.Asterisk
	ID        field.Uint64 // ID
	CreatedAt field.Time   // 创建时间
	Route     field.String // 路由

	fieldMap map[string]field.Expr
}

func (r routeWhitelist) Table(newTableName string) *routeWhitelist {
	r.routeWhitelistDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r routeWhitelist) As(alias string) *routeWhitelist {
	r.routeWhitelistDo.DO = *(r.routeWhitelistDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *routeWhitelist) updateTableName(table string) *routeWhitelist {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint64(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.Route = field.NewString(table, "route")

	r.fillFieldMap()

	return r
}

func (r *routeWhitelist) WithContext(ctx context.Context) IRouteWhitelistDo {
	return r.routeWhitelistDo.WithContext(ctx)
}

func (r routeWhitelist) TableName() string { return r.routeWhitelistDo.TableName() }

func (r routeWhitelist) Alias() string { return r.routeWhitelistDo.Alias() }

func (r routeWhitelist) Columns(cols ...field.Expr) gen.Columns {
	return r.routeWhitelistDo.Columns(cols...)
}

func (r *routeWhitelist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *routeWhitelist) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["route"] = r.Route
}

func (r routeWhitelist) clone(db *gorm.DB) routeWhitelist {
	r.routeWhitelistDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r routeWhitelist) replaceDB(db *gorm.DB) routeWhitelist {
	r.routeWhitelistDo.ReplaceDB(db)
	return r
}

type routeWhitelistDo struct{ gen.DO }

type IRouteWhitelistDo interface {
	gen.SubQuery
	Debug() IRouteWhitelistDo
	WithContext(ctx context.Context) IRouteWhitelistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRouteWhitelistDo
	WriteDB() IRouteWhitelistDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRouteWhitelistDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRouteWhitelistDo
	Not(conds ...gen.Condition) IRouteWhitelistDo
	Or(conds ...gen.Condition) IRouteWhitelistDo
	Select(conds ...field.Expr) IRouteWhitelistDo
	Where(conds ...gen.Condition) IRouteWhitelistDo
	Order(conds ...field.Expr) IRouteWhitelistDo
	Distinct(cols ...field.Expr) IRouteWhitelistDo
	Omit(cols ...field.Expr) IRouteWhitelistDo
	Join(table schema.Tabler, on ...field.Expr) IRouteWhitelistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRouteWhitelistDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRouteWhitelistDo
	Group(cols ...field.Expr) IRouteWhitelistDo
	Having(conds ...gen.Condition) IRouteWhitelistDo
	Limit(limit int) IRouteWhitelistDo
	Offset(offset int) IRouteWhitelistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRouteWhitelistDo
	Unscoped() IRouteWhitelistDo
	Create(values ...*models.RouteWhitelist) error
	CreateInBatches(values []*models.RouteWhitelist, batchSize int) error
	Save(values ...*models.RouteWhitelist) error
	First() (*models.RouteWhitelist, error)
	Take() (*models.RouteWhitelist, error)
	Last() (*models.RouteWhitelist, error)
	Find() ([]*models.RouteWhitelist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RouteWhitelist, err error)
	FindInBatches(result *[]*models.RouteWhitelist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.RouteWhitelist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRouteWhitelistDo
	Assign(attrs ...field.AssignExpr) IRouteWhitelistDo
	Joins(fields ...field.RelationField) IRouteWhitelistDo
	Preload(fields ...field.RelationField) IRouteWhitelistDo
	FirstOrInit() (*models.RouteWhitelist, error)
	FirstOrCreate() (*models.RouteWhitelist, error)
	FindByPage(offset int, limit int) (result []*models.RouteWhitelist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRouteWhitelistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r routeWhitelistDo) Debug() IRouteWhitelistDo {
	return r.withDO(r.DO.Debug())
}

func (r routeWhitelistDo) WithContext(ctx context.Context) IRouteWhitelistDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r routeWhitelistDo) ReadDB() IRouteWhitelistDo {
	return r.Clauses(dbresolver.Read)
}

func (r routeWhitelistDo) WriteDB() IRouteWhitelistDo {
	return r.Clauses(dbresolver.Write)
}

func (r routeWhitelistDo) Session(config *gorm.Session) IRouteWhitelistDo {
	return r.withDO(r.DO.Session(config))
}

func (r routeWhitelistDo) Clauses(conds ...clause.Expression) IRouteWhitelistDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r routeWhitelistDo) Returning(value interface{}, columns ...string) IRouteWhitelistDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r routeWhitelistDo) Not(conds ...gen.Condition) IRouteWhitelistDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r routeWhitelistDo) Or(conds ...gen.Condition) IRouteWhitelistDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r routeWhitelistDo) Select(conds ...field.Expr) IRouteWhitelistDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r routeWhitelistDo) Where(conds ...gen.Condition) IRouteWhitelistDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r routeWhitelistDo) Order(conds ...field.Expr) IRouteWhitelistDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r routeWhitelistDo) Distinct(cols ...field.Expr) IRouteWhitelistDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r routeWhitelistDo) Omit(cols ...field.Expr) IRouteWhitelistDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r routeWhitelistDo) Join(table schema.Tabler, on ...field.Expr) IRouteWhitelistDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r routeWhitelistDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRouteWhitelistDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r routeWhitelistDo) RightJoin(table schema.Tabler, on ...field.Expr) IRouteWhitelistDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r routeWhitelistDo) Group(cols ...field.Expr) IRouteWhitelistDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r routeWhitelistDo) Having(conds ...gen.Condition) IRouteWhitelistDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r routeWhitelistDo) Limit(limit int) IRouteWhitelistDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r routeWhitelistDo) Offset(offset int) IRouteWhitelistDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r routeWhitelistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRouteWhitelistDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r routeWhitelistDo) Unscoped() IRouteWhitelistDo {
	return r.withDO(r.DO.Unscoped())
}

func (r routeWhitelistDo) Create(values ...*models.RouteWhitelist) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r routeWhitelistDo) CreateInBatches(values []*models.RouteWhitelist, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r routeWhitelistDo) Save(values ...*models.RouteWhitelist) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r routeWhitelistDo) First() (*models.RouteWhitelist, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RouteWhitelist), nil
	}
}

func (r routeWhitelistDo) Take() (*models.RouteWhitelist, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RouteWhitelist), nil
	}
}

func (r routeWhitelistDo) Last() (*models.RouteWhitelist, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RouteWhitelist), nil
	}
}

func (r routeWhitelistDo) Find() ([]*models.RouteWhitelist, error) {
	result, err := r.DO.Find()
	return result.([]*models.RouteWhitelist), err
}

func (r routeWhitelistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RouteWhitelist, err error) {
	buf := make([]*models.RouteWhitelist, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r routeWhitelistDo) FindInBatches(result *[]*models.RouteWhitelist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r routeWhitelistDo) Attrs(attrs ...field.AssignExpr) IRouteWhitelistDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r routeWhitelistDo) Assign(attrs ...field.AssignExpr) IRouteWhitelistDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r routeWhitelistDo) Joins(fields ...field.RelationField) IRouteWhitelistDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r routeWhitelistDo) Preload(fields ...field.RelationField) IRouteWhitelistDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r routeWhitelistDo) FirstOrInit() (*models.RouteWhitelist, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RouteWhitelist), nil
	}
}

func (r routeWhitelistDo) FirstOrCreate() (*models.RouteWhitelist, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RouteWhitelist), nil
	}
}

func (r routeWhitelistDo) FindByPage(offset int, limit int) (result []*models.RouteWhitelist, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r routeWhitelistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r routeWhitelistDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r routeWhitelistDo) Delete(models ...*models.RouteWhitelist) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *routeWhitelistDo) withDO(do gen.Dao) *routeWhitelistDo {
	r.DO = *do.(*gen.DO)
	return r
}
